{"version":3,"file":"dutier.min.js","sources":["../src/providers.js","../src/updateState.js","../src/setReducer.js","../src/asyncReducer.js","../src/applyHandler.js","../src/applyMiddleware.js","../src/dispatch.js","../src/getState.js","../src/unsubscribe.js","../src/subscribe.js","../src/middleware.js","../src/createStore.js","../src/combine.js"],"sourcesContent":["/**\n * The Providers\n */ \nexport const Provider = {\n  // The reducers\n  _reducers: [],\n  // The subscribe handlers\n  _handlers: [],\n  // the middlewares\n  _middlewares: [],\n  // The state manager\n  _updateState: function(){}\n}","/**\n * Creates a Dutier store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n * @param { Object } state The initial application state\n * @return {Function} currentState Return a function that\n * updates and returns the current state\n */\nexport default (state) => {\n  return (\n    function(state) {\n      return current => {\n        state = Object.assign({}, state, current)\n        return JSON.parse(JSON.stringify(state))\n      }\n    }(state)\n  )\n}\n","import { Provider } from './providers'\nimport create from './updateState'\n\n/**\n * @name setReducer\n * @description Set the reducer function, the\n * initial state of the reducer and store state\n */\nexport default reducers => {\n  // if createStore don't was called yet\n  if (Provider._updateState({}) === undefined) {\n    Provider._updateState = create({})\n  }\n  reducers.forEach( reducer => {\n    const initial = reducer(undefined, { type: '@@DUTIER.INITIAL_STATE' })\n    const index = Provider._reducers.length\n    Provider._reducers[index] = { reducer, initial }\n    Provider._updateState(initial)\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Async Reducer\n * Just dispatch if return new state payloads.\n * With this, the subscribe function will not be\n * called unnecessary, because the state don't be changed\n */\nexport default action => {\n  return new Promise( resolve  => {\n    Provider._reducers.forEach(({ reducer, initial }) => {\n      const oldState = reducer.current ? Provider._updateState({}) : initial\n      reducer.current = oldState\n      const state = reducer(oldState, action)\n      const reducerState = reducer(oldState, { action: '@@DUTIER.ACTION', payload: action.payload })\n      if (JSON.stringify( reducerState ) !== JSON.stringify(state)) {\n        return resolve({ action, oldState, state: Provider._updateState(state) })\n      }\n    })\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Apply the subscribe handler functions\n */ \nexport default ({ type, state, payload }) => {\n  Provider._handlers.forEach(handler => {\n    if (handler !== undefined && typeof handler === 'function') {\n      handler({ type, state, payload })\n    }\n  })\n  return { type, state, payload }\n}\n","import { Provider } from './providers'\n\nexport default data => {\n  Provider._middlewares.forEach( middleware => middleware.call(null, data) )\n  return Promise.resolve({ type: data.action.type, payload: data.action.payload, state: data.state });\n}","import asyncReducer from './asyncReducer'\nimport applyHandler from './applyHandler'\nimport applyMiddleware from './applyMiddleware'\n\n/**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  export default payload => {\n    return new Promise( resolve => \n      payload.call(null, resolve )\n    )\n    .then(asyncReducer)\n    .then(applyMiddleware)\n    .then(applyHandler)\n  }","import {Provider} from './providers'\n\n/**\n * @name getState\n * @return {Object} a copy of the state\n */\nexport default () => {\n  return Provider._updateState({})\n}\n","import { Provider } from './providers'\n\n/**\n * @name unsubscribe\n * @description Unsubscribes from listening to a component\n * @param {Function} handler The handler function\n **/\nexport default (handler) => {\n  Provider._handlers.forEach((fn, index) => {\n    if (fn === handler) {\n      Provider._handlers.splice(index, 1)\n    }\n  })\n}\n","import { Provider } from './providers'\nimport unsubscribe from './unsubscribe'\n\n/**\n * Subscribe to receive notifications when state is updated.\n * @name subscribe\n * @description Subscribe to call the handler function when the action will be triggered\n * @param {Function} handler The function that will be called\n **/\nexport default (handler) => {\n  Provider._handlers.push(handler)\n  return () => {\n    unsubscribe(handler)\n  }\n}\n","import { Provider } from './providers'\n\nexport default (...middlewares) => {\n  Provider._middlewares = Provider._middlewares.concat(middlewares)\n} ","import { Provider } from './providers'\nimport setReducer from './setReducer'\nimport create from './updateState'\nimport dispatch from './dispatch'\nimport getState from './getState'\nimport subscribe from './subscribe'\n\n/**\n * @name createStore\n * @description Sets the store state\n * @param {Object} data Simple Object that contain the State\n * @param {Function} reducers The action reducers\n */\nexport default ( ...reducers ) => {\n  if (Provider._updateState({}) === undefined) {\n    Provider._updateState = create({})\n  }\n  setReducer(reducers)\n  return { dispatch, subscribe, getState }\n}\n","import setReducer from './setReducer'\n\n/**\n * @name combine\n * @description Combine the reducers\n */  \nexport default (...reducers) => { \n  setReducer(reducers)\n}\n"],"names":["Provider","state","Object","assign","current","JSON","parse","stringify","undefined","_updateState","create","forEach","initial","reducer","type","index","_reducers","length","Promise","oldState","action","reducerState","payload","resolve","_handlers","handler","_middlewares","middleware","call","data","then","asyncReducer","applyMiddleware","applyHandler","fn","splice","push","middlewares","concat","reducers","dispatch","subscribe","getState"],"mappings":"mMAGA,IAAaA,0DAQG,yBCJAC,UAEZ,SAASA,UACA,qBACGC,OAAOC,UAAWF,EAAOG,GAC1BC,KAAKC,MAAMD,KAAKE,UAAUN,MAEnCA,uBCJ8BO,IAA9BR,EAASS,qBACFA,aAAeC,SAEjBC,QAAS,gBACVC,EAAUC,OAAQL,GAAaM,KAAM,2BACrCC,EAAQf,EAASgB,UAAUC,SACxBD,UAAUD,IAAWF,UAASD,aAC9BH,aAAaG,2BCRjB,IAAIM,QAAS,cACTF,UAAUL,QAAQ,gBAAGE,IAAAA,QAASD,IAAAA,QAC/BO,EAAWN,EAAQT,QAAUJ,EAASS,iBAAmBG,IACvDR,QAAUe,MACZlB,EAAQY,EAAQM,EAAUC,GAC1BC,EAAeR,EAAQM,GAAYC,OAAQ,kBAAmBE,QAASF,EAAOE,aAChFjB,KAAKE,UAAWc,KAAmBhB,KAAKE,UAAUN,UAC7CsB,GAAUH,SAAQD,WAAUlB,MAAOD,EAASS,aAAaR,4BCXtDa,IAAAA,KAAMb,IAAAA,MAAOqB,IAAAA,iBACpBE,UAAUb,QAAQ,iBACTH,IAAZiB,GAA4C,mBAAZA,MACxBX,OAAMb,QAAOqB,eAGlBR,OAAMb,QAAOqB,mCCRbI,aAAaf,QAAS,mBAAcgB,EAAWC,KAAK,KAAMC,KAC5DX,QAAQK,SAAUT,KAAMe,EAAKT,OAAON,KAAMQ,QAASO,EAAKT,OAAOE,QAASrB,MAAO4B,EAAK5B,8BCOlF,IAAIiB,QAAS,mBAClBI,EAAQM,KAAK,KAAML,KAEpBO,KAAKC,GACLD,KAAKE,GACLF,KAAKG,wBCTDjC,EAASS,6BCAFgB,KACLD,UAAUb,QAAQ,SAACuB,EAAInB,GAC1BmB,IAAOT,KACAD,UAAUW,OAAOpB,EAAO,iBCDvBU,YACLD,UAAUY,KAAKX,GACjB,aACOA,6DCVGY,2CACRX,aAAe1B,EAAS0B,aAAaY,OAAOD,wDCUnCE,qDACgB/B,IAA9BR,EAASS,qBACFA,aAAeC,SAEf6B,IACFC,WAAUC,YAAWC,6DCZbH,2CACNA"}