{"version":3,"file":"dutier.min.js","sources":["../src/providers.js","../src/updateState.js","../src/setReducer.js","../src/asyncReducer.js","../src/applyHandler.js","../src/applyMiddleware.js","../src/dispatch.js","../src/getState.js","../src/unsubscribe.js","../src/subscribe.js","../src/createStore.js","../src/combine.js","../src/middleware.js"],"sourcesContent":["/**\n * The Providers\n */ \nexport const Provider = {\n  // The reducers\n  _reducers: new Map(),\n  // The subscribe handlers\n  _handlers: [],\n  // the middlewares\n  _middlewares: [],\n  // The state manager\n  _updateState: function(){}\n}","/**\n * Creates a Dutier store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n * @param { Object } state The initial application state\n * @return {Function} currentState Return a function that\n * updates and returns the current state\n */\nexport default (state) => {\n  return (\n    function(state) {\n      return current => {\n        state = Object.assign({}, state, current)\n        return Object.assign({}, state)\n      }\n    }(state)\n  )\n}\n","import { Provider } from './providers'\nimport create from './updateState'\n\n/**\n * @name setReducer\n * @description Set the reducer function, the\n * initial state of the reducer and store state\n */\nexport default reducers => {\n  // if createStore don't was called yet\n  if (Provider._updateState({}) === undefined) {\n    Provider._updateState = create({})\n  }\n  reducers.forEach(reducer => {\n    const initial = reducer(undefined, { type: '@@DUTIER.INITIAL_STATE' })\n    Provider._reducers.set(reducer, { initial })\n    Provider._updateState(initial)\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Async Reducer\n * Just dispatch if return new state values.\n * With this, the subscribe function will not be\n * called unnecessary, because the state don't be changed\n */\nexport default action => {\n  return new Promise( resolve  => {\n    for ( let reducer of Provider._reducers ) {\n      const [ reducerFunction, reducerProps ] = reducer\n      const stateReducer = reducerProps.current ? reducerProps.current : reducerProps.initial\n      const current = reducerProps.current = reducerFunction(stateReducer, action)\n      const reducerOldState = reducerFunction(stateReducer, { type: '@@Dutier.OLD_STATE', value: action.value })\n      // pass old state just to middleware\n      const oldState = Object.assign({}, Provider._updateState({}), reducerOldState)\n      if (JSON.stringify( current ) !== JSON.stringify(stateReducer)) {\n        return resolve({ action, oldState, state: Provider._updateState(current) })\n      }\n    }\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Apply the subscribe handler functions\n */ \nexport default ({ type, state }) => {\n  Provider._handlers.forEach(handler => {\n    if (handler !== undefined && typeof handler === 'function') {\n      handler({ type, state })\n    }\n  })\n  return { type, state }\n}\n","import { Provider } from './providers'\n\nexport default data => {\n  Provider._middlewares.forEach( middleware => middleware.call(null, data) )\n  return Promise.resolve({ type:data.action.type, state: data.state });\n}","import asyncReducer from './asyncReducer'\nimport applyHandler from './applyHandler'\nimport applyMiddleware from './applyMiddleware'\n\n/**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  export default payload => {\n    return new Promise( resolve => \n      payload.call(null, resolve )\n    )\n    .then(asyncReducer)\n    .then(applyMiddleware)\n    .then(applyHandler)\n  }","import {Provider} from './providers'\n\n/**\n * @name getState\n * @return {Object} a copy of the state\n */\nexport default () => {\n  return Provider._updateState({})\n}\n","import { Provider } from './providers'\n\n/**\n * @name unsubscribe\n * @description Unsubscribes from listening to a component\n * @param {Function} handler The handler function\n **/\nexport default (handler) => {\n  Provider._handlers.forEach((fn, index) => {\n    if (fn === handler) {\n      Provider._handlers.splice(index, 1)\n    }\n  })\n}\n","import { Provider } from './providers'\nimport unsubscribe from './unsubscribe'\n\n/**\n * Subscribe to receive notifications when state is updated.\n * @name subscribe\n * @description Subscribe to call the handler function when the action will be triggered\n * @param {Function} handler The function that will be called\n **/\nexport default (handler) => {\n  Provider._handlers.push(handler)\n  return () => {\n    unsubscribe(handler)\n  }\n}\n","import { Provider } from './providers'\nimport setReducer from './setReducer'\nimport create from './updateState'\nimport dispatch from './dispatch'\nimport getState from './getState'\nimport subscribe from './subscribe'\n\n/**\n * @name createStore\n * @description Sets the store state\n * @param {Object} data Simple Object that contain the State\n * @param {Function} reducers The action reducers\n */\nexport default ( ...reducers ) => {\n  if (Provider._updateState({}) === undefined) {\n    Provider._updateState = create({})\n  }\n  setReducer(reducers)\n  return { dispatch, subscribe, getState }\n}\n","import setReducer from './setReducer'\n\n/**\n * @name combine\n * @description Combine the reducers\n */  \nexport default (...reducers) => { \n  setReducer(reducers)\n}\n","import { Provider } from './providers'\n\nexport default (...middlewares) => {\n  Provider._middlewares = Provider._middlewares.concat(middlewares)\n} "],"names":["Provider","Map","state","Object","assign","current","undefined","_updateState","create","forEach","initial","reducer","type","_reducers","set","Promise","reducerFunction","reducerProps","stateReducer","action","reducerOldState","value","oldState","JSON","stringify","resolve","_handlers","handler","_middlewares","middleware","call","data","payload","then","asyncReducer","applyMiddleware","applyHandler","fn","index","splice","push","reducers","dispatch","subscribe","getState","middlewares","concat"],"mappings":"mMAGA,IAAaA,aAEA,IAAIC,8CAMD,yBCJAC,UAEZ,SAASA,UACA,qBACGC,OAAOC,UAAWF,EAAOG,GAC1BF,OAAOC,UAAWF,KAE3BA,uBCJ8BI,IAA9BN,EAASO,qBACFA,aAAeC,SAEjBC,QAAQ,gBACTC,EAAUC,OAAQL,GAAaM,KAAM,6BAClCC,UAAUC,IAAIH,GAAWD,cACzBH,aAAaG,icCPjB,IAAIK,QAAS,mDACGf,EAASa,yDAAY,KAAhCF,cACkCA,KAAlCK,OAAiBC,OACnBC,EAAeD,EAAaZ,QAAUY,EAAaZ,QAAUY,EAAaP,QAC1EL,EAAUY,EAAaZ,QAAUW,EAAgBE,EAAcC,GAC/DC,EAAkBJ,EAAgBE,GAAgBN,KAAM,qBAAsBS,MAAOF,EAAOE,QAE5FC,EAAWnB,OAAOC,UAAWJ,EAASO,iBAAkBa,MAC1DG,KAAKC,UAAWnB,KAAckB,KAAKC,UAAUN,UACxCO,GAAUN,SAAQG,WAAUpB,MAAOF,EAASO,aAAaF,yGCbtDO,IAAAA,KAAMV,IAAAA,eACbwB,UAAUjB,QAAQ,iBACTH,IAAZqB,GAA4C,mBAAZA,MACxBf,OAAMV,aAGXU,OAAMV,iCCRN0B,aAAanB,QAAS,mBAAcoB,EAAWC,KAAK,KAAMC,KAC5DhB,QAAQU,SAAUb,KAAKmB,EAAKZ,OAAOP,KAAMV,MAAO6B,EAAK7B,8BCOnD,IAAIa,QAAS,mBAClBiB,EAAQF,KAAK,KAAML,KAEpBQ,KAAKC,GACLD,KAAKE,GACLF,KAAKG,wBCTDpC,EAASO,6BCAFoB,KACLD,UAAUjB,QAAQ,SAAC4B,EAAIC,GAC1BD,IAAOV,KACAD,UAAUa,OAAOD,EAAO,iBCDvBX,YACLD,UAAUc,KAAKb,GACjB,aACOA,yDCCIc,qDACgBnC,IAA9BN,EAASO,qBACFA,aAAeC,SAEfiC,IACFC,WAAUC,YAAWC,6DCZbH,2CACNA,4DCLMI,2CACRjB,aAAe5B,EAAS4B,aAAakB,OAAOD"}