{"version":3,"file":"dutier.min.js","sources":["../src/providers.js","../src/setReducer.js","../src/updateState.js","../src/asyncReducer.js","../src/applyHandler.js","../src/dispatch.js","../src/getState.js","../src/unsubscribe.js","../src/subscribe.js","../src/createStore.js","../src/combine.js"],"sourcesContent":["/**\n * The Providers\n */ \nexport const Provider = {\n  // The reducers\n  _reducers: new Map(),\n  // The subscribe handlers\n  _handlers: [],\n  // The state manager\n  _updateState: function(){}\n}","import { Provider } from './providers'\n/**\n * @name setReducer\n * @description Set the reducer function, the\n * initial state of the reducer and store state\n */  \nexport default reducers => {\n    reducers.forEach( reducer => {\n        const initial = reducer(undefined, { type: '@@DUTIER.INITIAL_STATE' })\n        Provider._reducers.set(reducer, { initial } )\n        Provider._updateState(initial)\n  })\n}","/**\n * Creates a Dutier store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n * @param { Object } state The initial application state\n * @return {Function} currentState Return a function that\n * updates and returns the current state\n */\nexport default (state) => {\n  return (\n    function(state) {\n      var state = Object.assign({}, state)\n      return current => {\n        state = Object.assign({}, state, current)\n        return state\n      }\n    }(state)\n  )\n}\n","import { Provider } from './providers'\n\n/**\n * Async Reducer\n * Just dispatch if return new state values.\n * With this, the subscribe function will not be\n * called unnecessary, because the state don't be changed\n */\nexport default (action) => {\n  return new Promise( ( resolve, reject ) => {\n    for (let reducer of Provider._reducers ) {\n      const reducerFunction = reducer[0]\n      const reducerProps = reducer[1]\n      const stateReducer = reducerProps.current ? reducerProps.current : reducerProps.initial\n      const current = reducerProps.current = reducerFunction(stateReducer, action)\n      if (JSON.stringify( current ) !== JSON.stringify(stateReducer)) {\n        return resolve({type: action.type, state: Provider._updateState(current) })\n      }\n    }\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Apply the subscribe handler functions\n */ \nexport default ({ type, state }) => {\n  Provider._handlers.forEach(handler => {\n    if (handler !== undefined && typeof handler === 'function') {\n      handler({ type, state })\n    }\n  })\n  return { type, state }\n}\n","import asyncReducer from './asyncReducer'\nimport applyHandler from './applyHandler'\n\n/**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  export default  ( payload ) => {\n    return new Promise( resolve => \n      payload.call(null, resolve )\n    ).then(asyncReducer)\n    .then(applyHandler)\n  }","import {Provider} from './providers'\n\n/**\n * @name getState\n * @return {Object} a copy of the state\n */\nexport default () => {\n  return Provider._updateState({})\n}\n","import { Provider } from './providers'\n\n/**\n * @name unsubscribe\n * @description Unsubscribes from listening to a component\n * @param {Function} handler The handler function\n **/\nexport default (handler) => {\n  Provider._handlers.forEach((fn, index) => {\n    if (fn === handler) {\n      Provider._handlers.splice(index, 1)\n    }\n  })\n}\n","import { Provider } from './providers'\nimport unsubscribe from './unsubscribe'\n\n/**\n * Subscribe to receive notifications when state is updated.\n * @name subscribe\n * @description Subscribe to call the handler function when the action will be triggered\n * @param {Function} handler The function that will be called\n **/\nexport default (handler) => {\n  Provider._handlers.push(handler)\n  return () => {\n    unsubscribe(handler)\n  }\n}\n","import { Provider } from './providers'\nimport setReducer from './setReducer'\nimport create from './updateState'\nimport dispatch from './dispatch'\nimport getState from './getState'\nimport subscribe from './subscribe'\n\n/**\n * @name createStore\n * @description Sets the store state\n * @param {Object} data Simple Object that contain the State\n * @param {Function} reducers The action reducers\n */\nexport default ( ...reducers ) => {\n  Provider._updateState = create({})\n  setReducer(reducers)\n  return { dispatch, subscribe, getState }\n}\n","import setReducer from './setReducer'\n\n/**\n * @name combine\n * @description Combine the reducers\n */  \nexport default (...reducers) => { \n  setReducer(reducers)\n}\n"],"names":["Provider","Map","forEach","initial","reducer","undefined","type","_reducers","set","_updateState","state","Object","assign","current","action","Promise","resolve","reject","reducerFunction","reducerProps","stateReducer","JSON","stringify","_handlers","handler","payload","call","then","asyncReducer","applyHandler","fn","index","splice","push","reducers","create","dispatch","subscribe","getState"],"mappings":"mMAGA,IAAaA,aAEA,IAAIC,8BAID,8BCFHC,QAAS,gBACRC,EAAUC,OAAQC,GAAaC,KAAM,6BAClCC,UAAUC,IAAIJ,GAAWD,cACzBM,aAAaN,iBCHdO,UAEZ,SAASA,OACHA,EAAQC,OAAOC,UAAWF,UACvB,qBACGC,OAAOC,UAAWF,EAAOG,KAGnCH,eCPUI,UACP,IAAIC,QAAS,SAAEC,EAASC,0CACTjB,EAASO,yDAAY,KAAhCH,UACDc,EAAkBd,EAAQ,GAC1Be,EAAef,EAAQ,GACvBgB,EAAeD,EAAaN,QAAUM,EAAaN,QAAUM,EAAahB,QAC1EU,EAAUM,EAAaN,QAAUK,EAAgBE,EAAcN,MACjEO,KAAKC,UAAWT,KAAcQ,KAAKC,UAAUF,UACxCJ,GAASV,KAAMQ,EAAOR,KAAMI,MAAOV,EAASS,aAAaI,yGCXtDP,IAAAA,KAAMI,IAAAA,eACba,UAAUrB,QAAQ,iBACTG,IAAZmB,GAA4C,mBAAZA,MACxBlB,OAAMI,aAGXJ,OAAMI,qBCFGe,UACT,IAAIV,QAAS,mBAClBU,EAAQC,KAAK,KAAMV,KACnBW,KAAKC,GACND,KAAKE,wBCND7B,EAASS,6BCAFe,KACLD,UAAUrB,QAAQ,SAAC4B,EAAIC,GAC1BD,IAAON,KACAD,UAAUS,OAAOD,EAAO,iBCDvBP,YACLD,UAAUU,KAAKT,GACjB,aACOA,yDCCIU,kDACTzB,aAAe0B,QACbD,IACFE,WAAUC,YAAWC,6DCVbJ,2CACNA"}