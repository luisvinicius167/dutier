{"version":3,"file":"dutier.min.js","sources":["../src/providers.js","../src/updateState.js","../src/asyncReducer.js","../src/applyHandler.js","../src/dispatch.js","../src/getState.js","../src/unsubscribe.js","../src/subscribe.js","../src/createStore.js","../src/combine.js"],"sourcesContent":["/**\n * The Providers\n */ \nexport const Provider = {\n  _reducers: [],\n  _handlers: [],\n  _updateState: function(){}\n}","/**\n * Creates a Dutier store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n * @param { Object } state The initial application state\n * @return {Function} currentState Return a function that\n * updates and returns the current state\n */\nexport default (state) => {\n  return (\n    function(state) {\n      var state = Object.assign({}, state)\n      return current => {\n        state = Object.assign({}, state, current)\n        return state\n      }\n    }(state)\n  )\n}\n","import { Provider } from './providers'\n\n/**\n * Async Reducer\n * Just dispatch if return new state values.\n * With this, the subscribe function will not be\n * called unnecessary, because the state don't be changed\n */\nexport default (action) => {\n  return new Promise( (resolve, reject )=> {\n    Provider._reducers\n      .forEach( reducer => {\n        const asyncReducer = new Promise(resolve => reducer.call(null, resolve, Provider._updateState({}), action))\n        asyncReducer.then( state => {\n          if (JSON.stringify(state) !== JSON.stringify(Provider._updateState({}))) {\n            resolve({type: action.type, state: Provider._updateState(state) })\n          }\n        })\n      })\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Apply the subscribe handler functions\n */ \nexport default ({ type, state }) => {\n  Provider._handlers.forEach(handler => {\n    if (handler !== undefined && typeof handler === 'function') {\n      handler({ type, state })\n    }\n  })\n  return { type, state }\n}\n","import asyncReducer from './asyncReducer'\nimport applyHandler from './applyHandler'\n\n/**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  export default  ( payload ) => {\n    return Promise.resolve(payload)\n        .then(asyncReducer)\n        .then(applyHandler)\n  }","import {Provider} from './providers'\n\n/**\n * @name getState\n * @return {Object} a copy of the state\n */\nexport default () => {\n  return Provider._updateState({})\n}\n","import { Provider } from './providers'\n\n/**\n * @name unsubscribe\n * @description Unsubscribes from listening to a component\n * @param {Function} handler The handler function\n **/\nexport default (handler) => {\n  Provider._handlers.forEach((fn, index) => {\n    if (fn === handler) {\n      Provider._handlers.splice(index, 1)\n    }\n  })\n}\n","import { Provider } from './providers'\nimport unsubscribe from './unsubscribe'\n\n/**\n * Subscribe to receive notifications when state is updated.\n * @name subscribe\n * @description Subscribe to call the handler function when the action will be triggered\n * @param {Function} handler The function that will be called\n **/\nexport default (handler) => {\n  Provider._handlers.push(handler)\n  return () => {\n    unsubscribe(handler)\n  }\n}\n","import { Provider } from './providers'\nimport create from './updateState'\nimport dispatch from './dispatch'\nimport getState from './getState'\nimport subscribe from './subscribe'\n\n/**\n * @name createStore\n * @description Sets the store state\n * @param {Object} data Simple Object that contain the State\n * @param {Function} reducers The action reducers\n */\nexport default (state, ...reducers) => {\n  Provider._reducers = [ ...reducers ];\n  if ( typeof Provider._updateState({}) === 'object' ) {\n    throw new Error('You just can create one store inside your application.')\n  } \n  Provider._updateState = create(state)\n  return { dispatch, subscribe, getState }\n}\n","import {Provider} from './providers'\n\n/**\n * @name combine\n * @description Combine the reducers\n */  \nexport default (...reducers) => {\n  Provider._reducers.push(...reducers);\n}\n"],"names":["Provider","state","Object","assign","current","action","Promise","resolve","reject","_reducers","forEach","reducer","call","_updateState","then","JSON","stringify","type","_handlers","undefined","handler","payload","asyncReducer","applyHandler","fn","index","splice","push","reducers","_typeof","Error","create","dispatch","subscribe","getState"],"mappings":"mMAGA,IAAaA,0CAGG,yBCCAC,UAEZ,SAASA,OACHA,EAAQC,OAAOC,UAAWF,UACvB,qBACGC,OAAOC,UAAWF,EAAOG,KAGnCH,eCPUI,UACP,IAAIC,QAAS,SAACC,EAASC,KACnBC,UACNC,QAAS,YACa,IAAIJ,QAAQ,mBAAWK,EAAQC,KAAK,KAAML,EAASP,EAASa,iBAAkBR,KACtFS,KAAM,YACbC,KAAKC,UAAUf,KAAWc,KAAKC,UAAUhB,EAASa,sBAC3CI,KAAMZ,EAAOY,KAAMhB,MAAOD,EAASa,aAAaZ,8BCVnDgB,IAAAA,KAAMhB,IAAAA,eACbiB,UAAUR,QAAQ,iBACTS,IAAZC,GAA4C,mBAAZA,MACxBH,OAAMhB,aAGXgB,OAAMhB,qBCFGoB,UACTf,QAAQC,QAAQc,GAClBP,KAAKQ,GACLR,KAAKS,wBCLLvB,EAASa,6BCAFO,KACLF,UAAUR,QAAQ,SAACc,EAAIC,GAC1BD,IAAOJ,KACAF,UAAUQ,OAAOD,EAAO,iBCDvBL,YACLF,UAAUS,KAAKP,GACjB,aACOA,wOCAAnB,8BAAU2B,wDACfnB,oBAAiBmB,GACgB,WAArCC,EAAO7B,EAASa,wBACb,IAAIiB,MAAM,mEAETjB,aAAekB,EAAO9B,IACtB+B,WAAUC,YAAWC,6CCXrBzB,WAAUkB"}